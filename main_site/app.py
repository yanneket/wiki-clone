from flask import Flask, render_template, request, jsonify, make_response
import logging
import requests
from datetime import timedelta, datetime
import os
import redis
import json

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__)))
BOT_TOKEN = '7953140297:AAGwWVx3zwmo-9MbQ-UUU1764nljCxuncQU'
RESET_EXPIRE_SECONDS = 30  # –¥–ª—è Redis TTL

# === Redis –∫–ª–∏–µ–Ω—Ç ===
redis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(
    __name__,
    template_folder=os.path.join(BASE_DIR, 'templates'),
    static_folder=os.path.join(BASE_DIR, 'static')
)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis ===

def set_reset(ref_id, expire_seconds=None, manual=False):
    data = {"manual": manual}
    key = f"reset:{ref_id}"
    redis_client.set(key, json.dumps(data))
    if expire_seconds is not None:
        redis_client.expire(key, expire_seconds)

def get_reset(ref_id):
    key = f"reset:{ref_id}"
    raw = redis_client.get(key)
    ttl = redis_client.ttl(key)
    logger.info(f"[GET_RESET] –ü–æ–ª—É—á–µ–Ω –∫–ª—é—á {key}: {raw}, TTL={ttl}")

    if raw is None:
        return None
    try:
        return json.loads(raw)
    except json.JSONDecodeError:
        logger.warning(f"[GET_RESET] –û—à–∏–±–∫–∞ JSON –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ {key}")
        return None


def try_lock_reset(ref_id):
    key = f"lock:reset:{ref_id}"
    return redis_client.set(key, '1', nx=True, ex=2)


def delete_reset(ref_id):
    key = f"reset:{ref_id}"
    redis_client.delete(key)

# === –ú–∞—Ä—à—Ä—É—Ç—ã ===

@app.route('/')
def home():
    ref = request.args.get('ref', '')
    if ref:
        logger.info(f"[HOME] –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å ID: {ref}")
    response = make_response(render_template('base.html'))
    response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    return response


@app.route('/log_query', methods=['POST'])
def log_query():
    data = request.json
    logger.info(f"[LOG_QUERY] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")

    ref_id = data.get('ref')
    query = data.get('query')

    if not ref_id or not query:
        logger.warning("[LOG_QUERY] –ü—Ä–æ–ø—É—â–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ref –∏–ª–∏ query")
        return jsonify({'status': 'error'}), 400

    telegram_msg = f"üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n–ó–∞–ø—Ä–æ—Å: {query}\nID: {ref_id}"

    try:
        response = requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json={'chat_id': ref_id, 'text': telegram_msg},
            timeout=5
        )
        logger.info(f"[LOG_QUERY] Telegram API: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"[LOG_QUERY] –û—à–∏–±–∫–∞ Telegram API: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–±—Ä–æ—Å –≤ Redis —Å TTL
    set_reset(ref_id, expire_seconds=RESET_EXPIRE_SECONDS, manual=False)
    logger.info(f"[LOG_QUERY] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä —Å–±—Ä–æ—Å–∞ –¥–ª—è ID: {ref_id}")

    return jsonify({'status': 'ok'})


@app.route('/check_reset')
def check_reset():
    logger.warning("[DEBUG] request.args: %s", dict(request.args))
    ref = request.args.get("ref")
    if not ref:
        logger.info("[CHECK_RESET] –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ref")
        return jsonify({'reset': False})

    logger.info(f"[CHECK_RESET] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–ª—è ID: {ref}")
    reset_data = get_reset(ref)

    if reset_data:
        manual = reset_data.get("manual", False)

        if manual:
            if try_lock_reset(ref):
                logger.info(f"[CHECK_RESET] –°—Ä–∞–±–æ—Ç–∞–ª —Ä—É—á–Ω–æ–π —Å–±—Ä–æ—Å –¥–ª—è ID: {ref}")
                delete_reset(ref)
                try:
                    message = f"üîÑ –°—Ä–∞–±–æ—Ç–∞–ª —Å–±—Ä–æ—Å –¥–ª—è ID: {ref}\n–¢–∏–ø: —Ä—É—á–Ω–æ–π"
                    requests.post(
                        f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                        json={"chat_id": ref, "text": message}
                    )
                except Exception as e:
                    logger.error(f"[CHECK_RESET] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            else:
                logger.info(f"[CHECK_RESET] –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä—É—á–Ω–æ–π —Å–±—Ä–æ—Å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è ID: {ref}")
            return jsonify({'reset': True})

        else:
            logger.info(f"[CHECK_RESET] –°–±—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∂–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL –¥–ª—è ID: {ref}")
            return jsonify({'reset': False})
    else:
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å (–ø–æ TTL)
        if try_lock_reset(ref):
            logger.info(f"[CHECK_RESET] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è ID: {ref}")
            try:
                message = f"üîÑ –°—Ä–∞–±–æ—Ç–∞–ª —Å–±—Ä–æ—Å –¥–ª—è ID: {ref}\n–¢–∏–ø: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞)"
                requests.post(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                    json={"chat_id": ref, "text": message}
                )
            except Exception as e:
                logger.error(f"[CHECK_RESET] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        else:
            logger.info(f"[CHECK_RESET] –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ-—Å–±—Ä–æ—Å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è ID: {ref}")

        return jsonify({'reset': True})



@app.route('/trigger_reset')
def trigger_reset():
    ref = request.args.get("ref")
    if not ref:
        logger.warning("[TRIGGER_RESET] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä ref")
        return "Missing ref", 400

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ Redis —Ä—É—á–Ω–æ–π —Å–±—Ä–æ—Å –±–µ–∑ TTL (–≤–µ—á–Ω—ã–π)
    set_reset(ref, expire_seconds=120, manual=True)
    logger.info(f"[TRIGGER_RESET] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—á–Ω–æ–π —Å–±—Ä–æ—Å –¥–ª—è ID: {ref}")
    return "Reset triggered", 200


@app.route('/check_reset_key')
def check_reset_key():
    ref = request.args.get("ref")
    if not ref:
        return jsonify({'exists': False, 'error': 'No ref provided'}), 400
    key = f"reset:{ref}"
    exists = redis_client.exists(key)
    return jsonify({'exists': bool(exists)})


@app.route('/calculator')
def calculator():
    ref = request.args.get('ref')
    if not ref:
        return "‚ùå Missing ref", 400
    return render_template('calculator.html', ref=ref)
