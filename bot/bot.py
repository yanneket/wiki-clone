from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import logging
import aiohttp

BOT_TOKEN = "7953140297:AAGwWVx3zwmo-9MbQ-UUU1764nljCxuncQU"
BASE_SITE_URL = "https://wikpedia.ru"

logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text="üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"):
    keyboard = [
        [KeyboardButton("üîó –ú–æ—è —Å—Å—ã–ª–∫–∞"), KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö")],
        [KeyboardButton("üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞":
        user_id = update.effective_user.id
        ref_link = f"{BASE_SITE_URL}?ref={user_id}"
        await update.message.reply_text(
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{ref_link}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏", url=ref_link)]
            ])
        )
    
    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö":
        user_id = update.effective_user.id
        async with aiohttp.ClientSession() as session:
            await session.get(f"{BASE_SITE_URL}/trigger_reset?ref={user_id}")
        await update.message.reply_text("‚úÖ –°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!")
    
    elif text == "üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–¥":
        context.user_data["awaiting_code"] = True
        await update.message.reply_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
async def handle_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_code"):
        return
    
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        context.user_data["awaiting_code"] = False
        await show_main_menu(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    if not text.isdigit() or len(text) != 4:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.")
        return
    
    user_id = update.effective_user.id
    ref_link = f"{BASE_SITE_URL}?ref={user_id}"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://wikicounter.ru/update_code",
                json={"code": text, "new_url": ref_link}
            ) as resp:
                data = await resp.json()
                if data.get("status") == "success":
                    await update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{ref_link}")
                else:
                    await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"Error updating code: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    
    context.user_data["awaiting_code"] = False
    await show_main_menu(update, context)

# –õ–æ–≥–∏ —Å –∫–Ω–æ–ø–∫–æ–π —Å–±—Ä–æ—Å–∞
async def send_log(context: ContextTypes.DEFAULT_TYPE, user_id: int, query_text: str):
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üîî –ù–æ–≤—ã–π –ø–æ–∏—Å–∫!\n–ó–∞–ø—Ä–æ—Å: {query_text}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"reset_user_{user_id}")]
        ])
    )

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", show_main_menu))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫!)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r'^(üîó –ú–æ—è —Å—Å—ã–ª–∫–∞|üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö|üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–¥)$'), handle_menu_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_code_input))
    
    app.run_polling()

if __name__ == "__main__":
    main()